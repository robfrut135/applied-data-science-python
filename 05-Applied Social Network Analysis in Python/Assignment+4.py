
# coding: utf-8

# ---
# 
# _You are currently looking at **version 1.2** of this notebook. To download notebooks and datafiles, as well as get help on Jupyter notebooks in the Coursera platform, visit the [Jupyter Notebook FAQ](https://www.coursera.org/learn/python-social-network-analysis/resources/yPcBs) course resource._
# 
# ---

# # Assignment 4

# In[2]:

import networkx as nx
import pandas as pd
import numpy as np
import pickle


# ---
# 
# ## Part 1 - Random Graph Identification
# 
# For the first part of this assignment you will analyze randomly generated graphs and determine which algorithm created them.

# In[2]:

P1_Graphs = pickle.load(open("A4_graphs","rb"))
P1_Graphs


# <br>
# `P1_Graphs` is a list containing 5 networkx graphs. Each of these graphs were generated by one of three possible algorithms:
# * Preferential Attachment (`"PA"`)
# * Small World with low probability of rewiring (`"SW_L"`)
# * Small World with high probability of rewiring (`"SW_H"`)
# 
# Anaylze each of the 5 graphs and determine which of the three algorithms generated the graph.
# 
# *The `graph_identification` function should return a list of length 5 where each element in the list is either `"PA"`, `"SW_L"`, or `"SW_H"`.*

# In[44]:

def graph_identification():
    
    methods = []
    for G in P1_Graphs:
        cc = nx.average_clustering(G)        
        degree = G.degree()
        degree_values = sorted(set(degree.values()))
        histogram = [list(degree.values()).count(i)/float(nx.number_of_nodes(G)) for i in degree_values]
        
        if len(histogram)>10:
            methods.append("PA")
        elif cc < 0.1:
            methods.append("SW_H")
        else:
            methods.append("SW_L")
            
    return methods


# ---
# 
# ## Part 2 - Company Emails
# 
# For the second part of this assignment you will be workking with a company"s email network where each node corresponds to a person at the company, and each edge indicates that at least one email has been sent between two people.
# 
# The network also contains the node attributes `Department` and `ManagementSalary`.
# 
# `Department` indicates the department in the company which the person belongs to, and `ManagementSalary` indicates whether that person is receiving a management position salary.

# In[3]:

G = nx.read_gpickle("email_prediction.txt")

print(nx.info(G))


# ### Part 2A - Salary Prediction
# 
# Using network `G`, identify the people in the network with missing values for the node attribute `ManagementSalary` and predict whether or not these individuals are receiving a management position salary.
# 
# To accomplish this, you will need to create a matrix of node features using networkx, train a sklearn classifier on nodes that have `ManagementSalary` data, and predict a probability of the node receiving a management salary for nodes where `ManagementSalary` is missing.
# 
# 
# 
# Your predictions will need to be given as the probability that the corresponding employee is receiving a management position salary.
# 
# The evaluation metric for this assignment is the Area Under the ROC Curve (AUC).
# 
# Your grade will be based on the AUC score computed for your classifier. A model which with an AUC of 0.88 or higher will receive full points, and with an AUC of 0.82 or higher will pass (get 80% of the full points).
# 
# Using your trained classifier, return a series of length 252 with the data being the probability of receiving management salary, and the index being the node id.
# 
#     Example:
#     
#         1       1.0
#         2       0.0
#         5       0.8
#         8       1.0
#             ...
#         996     0.7
#         1000    0.5
#         1001    0.0
#         Length: 252, dtype: float64

# In[39]:

import networkx as nx
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.neural_network import MLPClassifier

def salary_predictions():
    df = pd.DataFrame(G.nodes(data=True), columns=["nodeId","data"])
    df["clustering"] = pd.Series(nx.clustering(G))
    df["degree"] = pd.Series(G.degree())
    df["degree_centrality"] = pd.Series(nx.degree_centrality(G))
    df["closeness"] = pd.Series(nx.closeness_centrality(G, normalized=True))
    df["betweeness"] = pd.Series(nx.betweenness_centrality(G, normalized=True))
    df["pr"] = pd.Series(nx.pagerank(G))
    df["Department"] = df["data"].map(lambda x: x["Department"])
    df["ManagementSalary"] = df["data"].map(lambda x: x["ManagementSalary"])
    df["ManagementSalary"] = df["ManagementSalary"].fillna(-1)
    df.set_index(["nodeId"], inplace=True)
    df.drop("data", axis=1, inplace=True)    
    
    features = ["clustering","degree","degree_centrality","closeness","pr"]
    X_train = df[df["ManagementSalary"]!=-1][features]
    y_train = df[df["ManagementSalary"]!=-1]["ManagementSalary"]
    X_test = df[df["ManagementSalary"]==-1][features]        
    
    scaler = MinMaxScaler()    
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    clf = MLPClassifier(alpha=5, random_state=0, solver="lbfgs").fit(X_train_scaled, y_train)
        
    predictions = clf.predict_proba(X_test_scaled)[:, 1]
    return pd.Series(predictions, X_test.index)

#salary_predictions()


# ### Part 2B - New Connections Prediction
# 
# For the last part of this assignment, you will predict future connections between employees of the network. The future connections information has been loaded into the variable `future_connections`. The index is a tuple indicating a pair of nodes that currently do not have a connection, and the `Future Connection` column indicates if an edge between those two nodes will exist in the future, where a value of 1.0 indicates a future connection.

# In[42]:

future_connections = pd.read_csv("Future_Connections.csv", index_col=0, converters={0: eval})
future_connections.head()


# Using network `G` and `future_connections`, identify the edges in `future_connections` with missing values and predict whether or not these edges will have a future connection.
# 
# To accomplish this, you will need to create a matrix of features for the edges found in `future_connections` using networkx, train a sklearn classifier on those edges in `future_connections` that have `Future Connection` data, and predict a probability of the edge being a future connection for those edges in `future_connections` where `Future Connection` is missing.
# 
# 
# 
# Your predictions will need to be given as the probability of the corresponding edge being a future connection.
# 
# The evaluation metric for this assignment is the Area Under the ROC Curve (AUC).
# 
# Your grade will be based on the AUC score computed for your classifier. A model which with an AUC of 0.88 or higher will receive full points, and with an AUC of 0.82 or higher will pass (get 80% of the full points).
# 
# Using your trained classifier, return a series of length 122112 with the data being the probability of the edge being a future connection, and the index being the edge as represented by a tuple of nodes.
# 
#     Example:
#     
#         (107, 348)    0.35
#         (542, 751)    0.40
#         (20, 426)     0.55
#         (50, 989)     0.35
#                   ...
#         (939, 940)    0.15
#         (555, 905)    0.35
#         (75, 101)     0.65
#         Length: 122112, dtype: float64

# In[51]:

def new_connections_predictions():
    for node in G.nodes():
        G.node[node]["community"] = G.node[node]["Department"]
        
    preferential_attachment = list(nx.preferential_attachment(G))
    df_preferential_attachment = pd.DataFrame(index=[(x[0], x[1]) for x in preferential_attachment])
    df_preferential_attachment["preferential_attachment"] = [x[2] for x in preferential_attachment]
    
    cn_soundarajan_hopcroft = list(nx.cn_soundarajan_hopcroft(G))
    df_cn_soundarajan_hopcroft = pd.DataFrame(index=[(x[0], x[1]) for x in cn_soundarajan_hopcroft])
    df_cn_soundarajan_hopcroft["cn_soundarajan_hopcroft"] = [x[2] for x in cn_soundarajan_hopcroft]
    
    df = df_preferential_attachment.join(df_cn_soundarajan_hopcroft, how="outer")
    
    df["cn_soundarajan_hopcroft"] = df["cn_soundarajan_hopcroft"].fillna(value=0)
    df["resource_allocation_index"] = [x[2] for x in list(nx.resource_allocation_index(G))]
    df["jaccard_coefficient"] = [x[2] for x in list(nx.jaccard_coefficient(G))]
    
    df = future_connections.join(df, how="outer")
    
    df["Future Connection"] = df["Future Connection"].fillna(-1)
    future_connections["Future Connection"] = future_connections["Future Connection"].fillna(-1)
    
    features = ["cn_soundarajan_hopcroft", "preferential_attachment", "resource_allocation_index", "jaccard_coefficient"]
    X_train = df[df["Future Connection"]!=-1][features]
    y_train = df[df["Future Connection"]!=-1]["Future Connection"]
    X_test = df[df["Future Connection"]==-1][features]        
    
    scaler = MinMaxScaler()    
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    clf = MLPClassifier(alpha=5, random_state=0, solver="lbfgs").fit(X_train_scaled, y_train)
        
    predictions = clf.predict_proba(X_test_scaled)[:, 1]
    predictions_formated = pd.Series(predictions, X_test.index)
    
    result = future_connections[future_connections["Future Connection"]==-1]
    result["probability"] = [predictions_formated[x] for x in result.index]
    return result["probability"]

#new_connections_predictions()

